/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Color } from 'tns-core-modules/color';
import { ShapeEnum } from './shape.enum';
import { Length } from 'tns-core-modules/ui/page/page';
import { isAndroid, screen } from "tns-core-modules/platform";
var /** @type {?} */ LayeredShadow;
var /** @type {?} */ PlainShadow;
if (isAndroid) {
    LayeredShadow = android.graphics.drawable.LayerDrawable.extend({});
    PlainShadow = android.graphics.drawable.GradientDrawable.extend({});
}
var Shadow = /** @class */ (function () {
    function Shadow() {
    }
    /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    Shadow.apply = /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    function (tnsView, data) {
        var /** @type {?} */ LOLLIPOP = 21;
        if (tnsView.android &&
            android.os.Build.VERSION.SDK_INT >= LOLLIPOP) {
            Shadow.applyOnAndroid(tnsView, Shadow.getDefaults(data));
        }
        else if (tnsView.ios) {
            Shadow.applyOnIOS(tnsView, Shadow.getDefaults(data));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Shadow.getDefaults = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return Object.assign({}, data, {
            shape: (/** @type {?} */ (data)).shape || Shadow.DEFAULT_SHAPE,
            pressedElevation: (/** @type {?} */ (data)).pressedElevation || Shadow.DEFAULT_PRESSED_ELEVATION,
            pressedTranslationZ: (/** @type {?} */ (data)).pressedTranslationZ || Shadow.DEFAULT_PRESSED_ELEVATION,
            shadowColor: (/** @type {?} */ (data)).shadowColor ||
                Shadow.DEFAULT_SHADOW_COLOR,
            useShadowPath: ((/** @type {?} */ (data)).useShadowPath !== undefined ? (/** @type {?} */ (data)).useShadowPath : true),
            rasterize: ((/** @type {?} */ (data)).rasterize !== undefined ? (/** @type {?} */ (data)).rasterize : false)
        });
    };
    /**
     * @param {?} drawable
     * @return {?}
     */
    Shadow.isShadow = /**
     * @param {?} drawable
     * @return {?}
     */
    function (drawable) {
        return (drawable instanceof LayeredShadow || drawable instanceof PlainShadow);
    };
    /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    Shadow.applyOnAndroid = /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    function (tnsView, data) {
        var /** @type {?} */ nativeView = tnsView.android;
        var /** @type {?} */ shape;
        var /** @type {?} */ overrideBackground = true;
        var /** @type {?} */ currentBg = nativeView.getBackground();
        if (currentBg instanceof android.graphics.drawable.RippleDrawable) {
            // play nice if a ripple is wrapping a shadow
            var /** @type {?} */ rippleBg = currentBg.getDrawable(0);
            if (rippleBg instanceof android.graphics.drawable.InsetDrawable) {
                overrideBackground = false; // this is a button with it's own shadow
            }
            else if (Shadow.isShadow(rippleBg)) {
                // if the ripple is wrapping a shadow, strip it
                currentBg = rippleBg;
            }
        }
        if (overrideBackground) {
            if (Shadow.isShadow(currentBg)) {
                // make sure to have the right background
                currentBg = currentBg instanceof LayeredShadow ? // if layered, get the original background
                    currentBg.getDrawable(1) : null;
            }
            var /** @type {?} */ outerRadii = Array.create("float", 8);
            if (data.cornerRadius === undefined) {
                outerRadii[0] = outerRadii[1] = Length.toDevicePixels(tnsView.borderTopLeftRadius, 0);
                outerRadii[2] = outerRadii[3] = Length.toDevicePixels(tnsView.borderTopRightRadius, 0);
                outerRadii[4] = outerRadii[5] = Length.toDevicePixels(tnsView.borderBottomRightRadius, 0);
                outerRadii[6] = outerRadii[7] = Length.toDevicePixels(tnsView.borderBottomLeftRadius, 0);
            }
            else {
                java.util.Arrays.fill(outerRadii, Shadow.androidDipToPx(nativeView, /** @type {?} */ (data.cornerRadius)));
            }
            // use the user defined color or the default in case the color is TRANSPARENT
            var /** @type {?} */ bgColor = currentBg ?
                (currentBg instanceof android.graphics.drawable.ColorDrawable && currentBg.getColor() ?
                    currentBg.getColor() : android.graphics.Color.parseColor(data.bgcolor || Shadow.DEFAULT_BGCOLOR)) :
                android.graphics.Color.parseColor(data.bgcolor || Shadow.DEFAULT_BGCOLOR);
            var /** @type {?} */ newBg = void 0;
            if (data.shape !== ShapeEnum.RECTANGLE || data.bgcolor || !currentBg) {
                // replace background
                shape = new PlainShadow();
                shape.setShape(android.graphics.drawable.GradientDrawable[data.shape]);
                shape.setCornerRadii(outerRadii);
                shape.setColor(bgColor);
                newBg = shape;
            }
            else {
                // add a layer
                var /** @type {?} */ r = new android.graphics.drawable.shapes.RoundRectShape(outerRadii, null, null);
                shape = new android.graphics.drawable.ShapeDrawable(r);
                shape.getPaint().setColor(bgColor);
                var /** @type {?} */ arr = Array.create(android.graphics.drawable.Drawable, 2);
                arr[0] = shape;
                arr[1] = currentBg;
                var /** @type {?} */ drawable = new LayeredShadow(arr);
                newBg = drawable;
            }
            nativeView.setBackgroundDrawable(newBg);
        }
        nativeView.setElevation(Shadow.androidDipToPx(nativeView, /** @type {?} */ (data.elevation)));
        nativeView.setTranslationZ(Shadow.androidDipToPx(nativeView, /** @type {?} */ (data.translationZ)));
        if (nativeView.getStateListAnimator() || data.forcePressAnimation) {
            this.overrideDefaultAnimator(nativeView, data);
        }
    };
    /**
     * @param {?} nativeView
     * @param {?} data
     * @return {?}
     */
    Shadow.overrideDefaultAnimator = /**
     * @param {?} nativeView
     * @param {?} data
     * @return {?}
     */
    function (nativeView, data) {
        var /** @type {?} */ sla = new android.animation.StateListAnimator();
        var /** @type {?} */ ObjectAnimator = android.animation.ObjectAnimator;
        var /** @type {?} */ AnimatorSet = android.animation.AnimatorSet;
        var /** @type {?} */ shortAnimTime = android.R.integer.config_shortAnimTime;
        var /** @type {?} */ buttonDuration = nativeView.getContext().getResources().getInteger(shortAnimTime) / 2;
        var /** @type {?} */ pressedElevation = this.androidDipToPx(nativeView, data.pressedElevation);
        var /** @type {?} */ pressedZ = this.androidDipToPx(nativeView, data.pressedTranslationZ);
        var /** @type {?} */ elevation = this.androidDipToPx(nativeView, data.elevation);
        var /** @type {?} */ z = this.androidDipToPx(nativeView, data.translationZ || 0);
        var /** @type {?} */ pressedSet = new AnimatorSet();
        var /** @type {?} */ notPressedSet = new AnimatorSet();
        var /** @type {?} */ defaultSet = new AnimatorSet();
        pressedSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [pressedZ])
                .setDuration(buttonDuration),
            ObjectAnimator.ofFloat(nativeView, "elevation", [pressedElevation])
                .setDuration(0),
        ]));
        notPressedSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [z])
                .setDuration(buttonDuration),
            ObjectAnimator.ofFloat(nativeView, "elevation", [elevation])
                .setDuration(0),
        ]));
        defaultSet.playTogether(java.util.Arrays.asList([
            ObjectAnimator.ofFloat(nativeView, "translationZ", [0]).setDuration(0),
            ObjectAnimator.ofFloat(nativeView, "elevation", [0]).setDuration(0),
        ]));
        sla.addState([android.R.attr.state_pressed, android.R.attr.state_enabled], pressedSet);
        sla.addState([android.R.attr.state_enabled], notPressedSet);
        sla.addState([], defaultSet);
        nativeView.setStateListAnimator(sla);
    };
    /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    Shadow.applyOnIOS = /**
     * @param {?} tnsView
     * @param {?} data
     * @return {?}
     */
    function (tnsView, data) {
        var /** @type {?} */ nativeView = tnsView.ios;
        var /** @type {?} */ elevation = parseFloat(((/** @type {?} */ (data.elevation)) - 0).toFixed(2));
        nativeView.layer.maskToBounds = false;
        nativeView.layer.shadowColor = new Color(data.shadowColor).ios.CGColor;
        nativeView.layer.shadowOffset =
            data.shadowOffset ?
                CGSizeMake(0, parseFloat(String(data.shadowOffset))) :
                CGSizeMake(0, 0.54 * elevation - 0.14);
        nativeView.layer.shadowOpacity =
            data.shadowOpacity ?
                parseFloat(String(data.shadowOpacity)) :
                0.006 * elevation + 0.25;
        nativeView.layer.shadowRadius =
            data.shadowRadius ?
                parseFloat(String(data.shadowRadius)) :
                0.66 * elevation - 0.5;
        nativeView.layer.shouldRasterize = data.rasterize;
        nativeView.layer.rasterizationScale = screen.mainScreen.scale;
        var /** @type {?} */ shadowPath = null;
        if (data.useShadowPath) {
            shadowPath = UIBezierPath.bezierPathWithRoundedRectCornerRadius(nativeView.bounds, nativeView.layer.shadowRadius).cgPath;
        }
        nativeView.layer.shadowPath = shadowPath;
    };
    /**
     * @param {?} nativeView
     * @param {?} dip
     * @return {?}
     */
    Shadow.androidDipToPx = /**
     * @param {?} nativeView
     * @param {?} dip
     * @return {?}
     */
    function (nativeView, dip) {
        var /** @type {?} */ metrics = nativeView.getContext().getResources().getDisplayMetrics();
        return android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_DIP, dip, metrics);
    };
    Shadow.DEFAULT_SHAPE = ShapeEnum.RECTANGLE;
    Shadow.DEFAULT_BGCOLOR = '#FFFFFF';
    Shadow.DEFAULT_SHADOW_COLOR = '#000000';
    Shadow.DEFAULT_PRESSED_ELEVATION = 2;
    Shadow.DEFAULT_PRESSED_Z = 4;
    return Shadow;
}());
export { Shadow };
function Shadow_tsickle_Closure_declarations() {
    /** @type {?} */
    Shadow.DEFAULT_SHAPE;
    /** @type {?} */
    Shadow.DEFAULT_BGCOLOR;
    /** @type {?} */
    Shadow.DEFAULT_SHADOW_COLOR;
    /** @type {?} */
    Shadow.DEFAULT_PRESSED_ELEVATION;
    /** @type {?} */
    Shadow.DEFAULT_PRESSED_Z;
}

//# sourceMappingURL=data:application/json;base64,